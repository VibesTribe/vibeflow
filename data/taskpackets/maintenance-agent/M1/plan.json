{
  "context_snapshot_id": "729555503ed8e781b093fbc0f6e192887593b966daf3a38523d3cc5f67f4a891",
  "echo_check": "Deliver maintenance automation slice with drift detector + registry sync tasks ready for orchestration.",
  "open_questions": [],
  "slices": [
    {
      "slice_id": "M1",
      "name": "Maintenance Automation Bootstrap",
      "goal": "Stand up automated drift detection and registry refreshers so orchestrator stays healthy.",
      "tasks": [
        {
          "task_id": "M1.1",
          "task_type": "code",
          "domain_tag": "infra",
          "contract": {
            "task_id": "M1.1",
            "title": "Implement Plan Drift Scanner",
            "context_snapshot_id": "729555503ed8e781b093fbc0f6e192887593b966daf3a38523d3cc5f67f4a891",
            "parent_task_id": null,
            "task_type": "code",
            "domain_tag": "infra",
            "stage": "planned",
            "review_policy": "auto",
            "constraints": {
              "budget_usd": 0.35,
              "max_tokens": 7000,
              "latency_slo_ms": 60000,
              "model_behavior_required": {
                "topic_affinity": "Plan and task packet diffing",
                "policy_flags": [
                  "PII_FREE"
                ],
                "max_token_context": 32000
              }
            },
            "inputs": {
              "artifacts": [],
              "env": [],
              "dependencies": []
            },
            "acceptance_criteria": [
              "npm run maintenance:drift-check exits 0 on aligned plans",
              "Diff report renders key sections (slices, tasks, deliverables)",
              "Unit tests cover aligned + drift scenarios"
            ],
            "output_schema": {
              "files": [
                {
                  "path": "scripts/maintenance/run-plan-drift-check.mjs",
                  "type": "text"
                },
                {
                  "path": "docs/reports/ideas/maintenance-agent/drift-report.md",
                  "type": "text"
                }
              ],
              "format": "text"
            },
            "model_preferences": {
              "temperature": 0,
              "top_p": 0.1
            },
            "validation_checkpoints": [
              {
                "name": "unit-tests",
                "tool": "npm test"
              }
            ],
            "metadata": {
              "confidence": 0.96,
              "deliverable_language": "JavaScript",
              "deliverable_version": "ES2020",
              "requires_chat_url": false
            }
          },
          "confidence": 0.96,
          "depends_on": [],
          "notes": ""
        },
        {
          "task_id": "M1.2",
          "task_type": "code",
          "domain_tag": "infra",
          "contract": {
            "task_id": "M1.2",
            "title": "Schedule Registry Refresh",
            "context_snapshot_id": "729555503ed8e781b093fbc0f6e192887593b966daf3a38523d3cc5f67f4a891",
            "parent_task_id": null,
            "task_type": "code",
            "domain_tag": "infra",
            "stage": "planned",
            "review_policy": "auto",
            "constraints": {
              "budget_usd": 0.45,
              "max_tokens": 7500,
              "latency_slo_ms": 60000,
              "model_behavior_required": {
                "topic_affinity": "Automate periodic syncing of data/registry/*.json into docs/state snapshots with audit trails.",
                "policy_flags": [
                  "PII_FREE"
                ],
                "max_token_context": 32000
              }
            },
            "inputs": {
              "artifacts": [],
              "env": [],
              "dependencies": [
                "M1.1"
              ]
            },
            "acceptance_criteria": [
              "npm run maintenance:registry-refresh generates timestamped copies",
              "Log file records run metadata with success/failure status",
              "Supervisor gate can read the log to confirm refresh cadence"
            ],
            "output_schema": {
              "files": [
                {
                  "path": "scripts/maintenance/run-registry-refresh.mjs",
                  "type": "text"
                },
                {
                  "path": "docs/state/maintenance/registry-refresh.log.json",
                  "type": "text"
                }
              ],
              "format": "text"
            },
            "model_preferences": {
              "temperature": 0,
              "top_p": 0.1
            },
            "validation_checkpoints": [
              {
                "name": "unit-tests",
                "tool": "npm test"
              },
              {
                "name": "manual-run",
                "tool": "npm run maintenance:registry-refresh"
              }
            ],
            "metadata": {
              "confidence": 0.95,
              "deliverable_language": "JavaScript",
              "deliverable_version": "ES2020",
              "requires_chat_url": false
            }
          },
          "confidence": 0.95,
          "depends_on": [
            "M1.1"
          ],
          "notes": "Must call drift checker before syncing to avoid overwriting divergent plans."
        }
      ]
    }
  ]
}
